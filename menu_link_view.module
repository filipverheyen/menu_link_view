<?php

/**
 * @file
 * Contains menu_link_view.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_help().
 */
function menu_link_view_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.menu_link_view':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Menu Link View module allows you to add views as menu items.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function menu_link_view_menu_links_discovered_alter(&$links) {
  // Get all menu link view entities
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_view');
  $menu_link_views = $storage->loadMultiple();

  // Get the static override service
  $static_override = \Drupal::service('menu_link.static.overrides');

  // Add each menu link view entity as a menu link discovery item
  foreach ($menu_link_views as $id => $menu_link_view) {
    if (empty($id)) {
      continue;
    }

    $plugin_id = 'menu_link_view:' . $id;

    // Only load overrides if the plugin ID exists and is a string
    $overrides = [];
    if (is_string($plugin_id) && !empty($plugin_id)) {
      try {
        $overrides = $static_override->loadOverride($plugin_id) ?: [];
      }
      catch (\Exception $e) {
        \Drupal::logger('menu_link_view')->error('Error loading override for plugin @id: @message', [
          '@id' => $plugin_id,
          '@message' => $e->getMessage(),
        ]);
      }
    }

    // Create the menu link definition with defaults
    $enabled = !isset($overrides['enabled']) || $overrides['enabled'];
    $weight = isset($overrides['weight']) ? $overrides['weight'] : $menu_link_view->getWeight();
    $parent = isset($overrides['parent']) ? $overrides['parent'] : $menu_link_view->getParent();

    $definition = [
      'class' => 'Drupal\menu_link_view\Plugin\Menu\MenuLinkViewLink',
      'menu_name' => $menu_link_view->getMenuName(),
      'title' => $menu_link_view->label(),
      'description' => $menu_link_view->getDescription(),
      'weight' => $weight,
      'id' => $plugin_id,
      'metadata' => [
        'entity_id' => $id,
        'view_id' => $menu_link_view->getViewId(),
        'display_id' => $menu_link_view->getDisplayId(),
      ],
      'form_class' => 'Drupal\menu_link_view\Form\MenuLinkViewForm',
      'provider' => 'menu_link_view',
      'route_name' => '<nolink>',
      'parent' => $parent ?: '',
      'expanded' => TRUE,
      'options' => [],
      'enabled' => $enabled,
      'discovered' => TRUE,
      'manipulable' => TRUE,
    ];

    // Set the plugin definition
    $links[$plugin_id] = $definition;
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function menu_link_view_preprocess_menu(&$variables) {
  // Get the expander service.
  $expander = \Drupal::service('menu_link_view.expander');

  // Expand the menu items.
  if (isset($variables['items']) && !empty($variables['items'])) {
    $variables['items'] = $expander->expandTree($variables['items']);
  }
}

/**
 * Implements hook_entity_insert().
 */
function menu_link_view_entity_insert($entity) {
  if ($entity->getEntityTypeId() == 'menu_link_view') {
    // Rebuild menu link plugin definitions
    \Drupal::service('plugin.manager.menu.link')->rebuild();

    // Invalidate necessary cache tags
    Cache::invalidateTags(['menu:' . $entity->getMenuName(), 'config:system.menu.' . $entity->getMenuName()]);

    // Log for debugging
    \Drupal::logger('menu_link_view')->info('Menu link view entity @id inserted, plugin rebuilt', ['@id' => $entity->id()]);
  }
}

/**
 * Implements hook_entity_update().
 */
function menu_link_view_entity_update($entity) {
  if ($entity->getEntityTypeId() == 'menu_link_view') {
    // Rebuild menu link plugin definitions
    \Drupal::service('plugin.manager.menu.link')->rebuild();

    // Invalidate necessary cache tags
    Cache::invalidateTags(['menu:' . $entity->getMenuName(), 'config:system.menu.' . $entity->getMenuName()]);

    // Log for debugging
    \Drupal::logger('menu_link_view')->info('Menu link view entity @id updated, plugin rebuilt', ['@id' => $entity->id()]);
  }
}

/**
 * Implements hook_entity_delete().
 */
function menu_link_view_entity_delete($entity) {
  if ($entity->getEntityTypeId() == 'menu_link_view') {
    // Rebuild menu link plugin definitions
    \Drupal::service('plugin.manager.menu.link')->rebuild();

    // Invalidate necessary cache tags
    Cache::invalidateTags(['menu:' . $entity->getMenuName(), 'config:system.menu.' . $entity->getMenuName()]);

    // Log for debugging
    \Drupal::logger('menu_link_view')->info('Menu link view entity @id deleted, plugin rebuilt', ['@id' => $entity->id()]);
  }
}

/**
 * Implements hook_theme().
 */
function menu_link_view_theme($existing, $type, $theme, $path) {
  return [
    'menu_link_view' => [
      'variables' => [
        'title' => NULL,
        'items' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function menu_link_view_page_attachments(array &$attachments) {
  // Attach our CSS library.
  $attachments['#attached']['library'][] = 'menu_link_view/menu_link_view';
}

/**
 * Implements hook_library_info_build().
 */
function menu_link_view_library_info_build() {
  $libraries = [];

  $libraries['menu_link_view'] = [
    'version' => '1.x',
    'css' => [
      'theme' => [
        'css/menu_link_view.css' => [],
      ],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_cache_flush().
 */
function menu_link_view_cache_flush() {
  // Rebuild menu links
  \Drupal::service('plugin.manager.menu.link')->rebuild();
}
