<?php

/**
 * @file
 * Contains menu_link_view.module.
 *
 * Updated: 2025-06-05
 * By: filipverheyen
 * Drupal 11 compatible implementation
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Render\Element;
use Drupal\menu_link_view\MenuLinkViewExpander;
use Drupal\Core\Menu\MenuLinkTreeElement;
use Drupal\Core\Menu\MenuLinkInterface;

/**
 * Implements hook_help().
 */
function menu_link_view_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.menu_link_view':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Menu Link View module allows you to add views as menu items.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_operation().
 *
 * In Drupal 11, this is preferred over hook_entity_operation_alter().
 */
function menu_link_view_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity->getEntityTypeId() == 'menu_link_content') {
    $options = $entity->get('link')->options ?? [];
    if (!empty($options['menu_link_view']) && !empty($options['menu_link_view']['entity_id'])) {
      $entity_id = $options['menu_link_view']['entity_id'];

      // Provide our operations directly
      $operations['edit'] = [
        'title' => t('Edit view link'),
        'weight' => 10,
        'url' => Url::fromRoute('entity.menu_link_view.edit_form', ['menu_link_view' => $entity_id]),
      ];

      $operations['delete'] = [
        'title' => t('Delete view link'),
        'weight' => 100,
        'url' => Url::fromRoute('entity.menu_link_view.delete_form', ['menu_link_view' => $entity_id]),
      ];
    }
  }

  return $operations;
}

/**
 * Implements hook_entity_operation_alter().
 */
function menu_link_view_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'menu_link_content') {
    // Check if this is one of our special view menu items
    $options = $entity->get('link')->options ?? [];
    if (!empty($options['menu_link_view']) && !empty($options['menu_link_view']['entity_id'])) {
      $entity_id = $options['menu_link_view']['entity_id'];

      // Replace edit operation to point to our custom entity
      if (isset($operations['edit'])) {
        $operations['edit']['url'] = Url::fromRoute(
          'entity.menu_link_view.edit_form',
          ['menu_link_view' => $entity_id]
        );
        $operations['edit']['title'] = t('Edit view link');
      }

      // Replace delete operation to ensure both entities are deleted
      if (isset($operations['delete'])) {
        $operations['delete']['url'] = Url::fromRoute(
          'entity.menu_link_view.delete_form',
          ['menu_link_view' => $entity_id]
        );
      }

      // Remove translate operation if it exists
      if (isset($operations['translate'])) {
        unset($operations['translate']);
      }

      // Remove add operation if it exists
      if (isset($operations['add'])) {
        unset($operations['add']);
      }

      // IMPORTANT: In Drupal admin UI these operations might be named differently
      if (isset($operations['add-child'])) {
        unset($operations['add-child']);
      }

      if (isset($operations['add_child'])) {
        unset($operations['add_child']);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function menu_link_view_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'menu_edit_form') {
    // Add our custom JS to prevent children for view items
    $form['#attached']['library'][] = 'menu_link_view/menu-admin';

    // Add our custom validate handler to prevent children server-side
    $form['#validate'][] = 'menu_link_view_menu_edit_form_validate';

    // In Drupal 11, operations are built differently, we need to use #process
    // to alter them after they're built by the form API
    $form['links']['links']['#process'][] = 'menu_link_view_process_menu_links';
  }

  // For menu link content forms, prevent editing for our view items
  if ($form_id === 'menu_link_content_menu_link_content_form' && isset($form['#entity'])) {
    $menu_link = $form['#entity'];
    $options = $menu_link->get('link')->options ?? [];

    if (!empty($options['menu_link_view'])) {
      // Add message explaining the redirect
      \Drupal::messenger()->addWarning(t('This menu item is a View reference and needs to be edited through the View Link interface.'));

      // Redirect to our custom form
      $entity_id = $options['menu_link_view']['entity_id'];
      $url = Url::fromRoute('entity.menu_link_view.edit_form', ['menu_link_view' => $entity_id]);
      $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url->toString());
      $response->send();
      exit;
    }
  }
}

/**
 * Process callback for menu links in the menu edit form.
 *
 * This is a Drupal 11 approach to modify the operations for each menu item.
 */
function menu_link_view_process_menu_links($element) {
  // Process all menu items
  foreach (Element::children($element) as $key) {
    // Skip non-item array elements
    if (strpos($key, '#') === 0) {
      continue;
    }

    $item = &$element[$key];

    // Check if this is a view menu item by looking at the title
    if (isset($item['title']['#markup']) && strpos($item['title']['#markup'], '[View]') !== FALSE) {
      // Extract the menu_link_content entity from the form item
      if (isset($item['#item'])) {
        $plugin_id = $item['#item']->getPluginId();
        if (strpos($plugin_id, 'menu_link_content:') === 0) {
          $uuid = substr($plugin_id, strlen('menu_link_content:'));

          // Get the menu_link_content entity
          $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
          $entities = $storage->loadByProperties(['uuid' => $uuid]);
          $menu_link = reset($entities);

          if ($menu_link) {
            $options = $menu_link->get('link')->options ?? [];
            if (!empty($options['menu_link_view']) && !empty($options['menu_link_view']['entity_id'])) {
              $entity_id = $options['menu_link_view']['entity_id'];

              // Add a special class to identify view items
              $item['#attributes']['class'][] = 'menu-link-view-item';
              $item['#attributes']['data-menu-link-view'] = 'true';

              // Handle operations in various formats

              // Handle operations as 'operations' element (D10/D11 format)
              if (isset($item['operations']['#type']) && $item['operations']['#type'] === 'operations') {
                // Remove add operations
                if (isset($item['operations']['#links']['add'])) {
                  unset($item['operations']['#links']['add']);
                }

                if (isset($item['operations']['#links']['add-child'])) {
                  unset($item['operations']['#links']['add-child']);
                }

                if (isset($item['operations']['#links']['add_child'])) {
                  unset($item['operations']['#links']['add_child']);
                }

                // Remove translate operation
                if (isset($item['operations']['#links']['translate'])) {
                  unset($item['operations']['#links']['translate']);
                }

                // Replace edit operation
                if (isset($item['operations']['#links']['edit'])) {
                  $item['operations']['#links']['edit'] = [
                    'title' => t('Edit view link'),
                    'url' => Url::fromRoute('entity.menu_link_view.edit_form', ['menu_link_view' => $entity_id]),
                  ];
                }

                // Replace delete operation
                if (isset($item['operations']['#links']['delete'])) {
                  $item['operations']['#links']['delete']['url'] = Url::fromRoute(
                    'entity.menu_link_view.delete_form',
                    ['menu_link_view' => $entity_id]
                  );
                }
              }
              // Handle operations as dropbutton element
              elseif (isset($item['operations']['#type']) && $item['operations']['#type'] === 'dropbutton') {
                if (isset($item['operations']['#links'])) {
                  foreach (['add', 'add-child', 'add_child', 'translate'] as $op_to_remove) {
                    if (isset($item['operations']['#links'][$op_to_remove])) {
                      unset($item['operations']['#links'][$op_to_remove]);
                    }
                  }
                }
              }
              // Handle operations as individual buttons
              elseif (isset($item['operations'])) {
                // Remove unwanted operations
                foreach (['add', 'add-child', 'add_child', 'translate'] as $op_to_remove) {
                  if (isset($item['operations'][$op_to_remove])) {
                    unset($item['operations'][$op_to_remove]);
                  }
                }

                // Replace edit operation
                if (isset($item['operations']['edit'])) {
                  $item['operations']['edit']['#title'] = t('Edit view link');
                  $item['operations']['edit']['#url'] = Url::fromRoute(
                    'entity.menu_link_view.edit_form',
                    ['menu_link_view' => $entity_id]
                  );
                }

                // Replace delete operation
                if (isset($item['operations']['delete'])) {
                  $item['operations']['delete']['#url'] = Url::fromRoute(
                    'entity.menu_link_view.delete_form',
                    ['menu_link_view' => $entity_id]
                  );
                }
              }
            }
          }
        }
      }
    }
  }

  return $element;
}

/**
 * Validation handler for menu edit form to prevent children for view menu items.
 */
function menu_link_view_menu_edit_form_validate($form, FormStateInterface $form_state) {
  // Get the user input for menu parent selections
  $parents = $form_state->getValue('links');

  if (empty($parents)) {
    return;
  }

  // Get all our view menu items
  $view_menu_items = [];
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');

  // Use entity query with accessCheck set to FALSE
  $query = $storage->getQuery();
  $query->condition('title', '%[View]', 'LIKE');
  $query->accessCheck(FALSE);
  $ids = $query->execute();

  $menu_links = $storage->loadMultiple($ids);

  // Store both plugin ID and actual label for all view menu items
  foreach ($menu_links as $menu_link) {
    $options = $menu_link->get('link')->options ?? [];
    // Only if it's actually a view link item
    if (isset($options['menu_link_view'])) {
      $plugin_id = 'menu_link_content:' . $menu_link->uuid();
      $view_menu_items[$plugin_id] = $menu_link->label();
    }
  }

  // Check if any items are using a view menu item as parent
  foreach ($parents as $id => $item) {
    if (is_string($id) && !empty($item['parent']) && isset($view_menu_items[$item['parent']])) {
      // Get a clean item title
      $item_title = '';
      if (isset($form['links']['links'][$id]['title']['#markup'])) {
        $item_title = $form['links']['links'][$id]['title']['#markup'];
      } else {
        // Try to load the item to get its title
        if (strpos($id, 'menu_link_content:') === 0) {
          $uuid = substr($id, strlen('menu_link_content:'));
          $items = $storage->loadByProperties(['uuid' => $uuid]);
          $menu_item = reset($items);
          if ($menu_item) {
            $item_title = $menu_item->label();
          }
        }

        // Fallback to ID if we couldn't get a title
        if (empty($item_title)) {
          $item_title = t('Menu item');
        }
      }

      $form_state->setError(
        $form['links']['links'][$id]['parent'],
        t('The menu item %title cannot be placed under the view menu item %parent because view menu items cannot have children.', [
          '%title' => $item_title,
          '%parent' => $view_menu_items[$item['parent']],
        ])
      );
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function menu_link_view_entity_insert($entity) {
  if ($entity->getEntityTypeId() == 'menu_link_view') {
    // Create a menu_link_content entity for this view link
    _menu_link_view_ensure_menu_link_content($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function menu_link_view_entity_update($entity) {
  if ($entity->getEntityTypeId() == 'menu_link_view') {
    // Update or create the menu_link_content entity
    _menu_link_view_ensure_menu_link_content($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function menu_link_view_entity_delete($entity) {
  if ($entity->getEntityTypeId() == 'menu_link_view') {
    // Find and delete any associated menu_link_content entities
    $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');

    // Find all links that might be associated
    $query = $storage->getQuery()
      ->condition('title', '%[View]', 'LIKE')
      ->accessCheck(FALSE);
    $ids = $query->execute();

    if (!empty($ids)) {
      $menu_links = $storage->loadMultiple($ids);

      foreach ($menu_links as $menu_link) {
        $options = $menu_link->get('link')->options ?? [];

        // Check if this menu link is associated with our entity
        if (!empty($options['menu_link_view']) &&
            !empty($options['menu_link_view']['entity_id']) &&
            $options['menu_link_view']['entity_id'] == $entity->id()) {
          // Delete the associated menu link content
          $menu_link->delete();

          \Drupal::logger('menu_link_view')->notice('Deleted associated menu link content for view link @id', [
            '@id' => $entity->id()
          ]);
        }
      }
    }

    // Invalidate necessary cache tags
    Cache::invalidateTags([
      'menu:' . $entity->getMenuName(),
      'config:system.menu.' . $entity->getMenuName()
    ]);
  }
}

/**
 * Helper function to ensure a menu_link_content entity exists for the view link.
 *
 * @param \Drupal\menu_link_view\Entity\MenuLinkView $entity
 *   The menu link view entity.
 */
function _menu_link_view_ensure_menu_link_content($entity) {
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  $existing_menu_link = NULL;

  // Try to find existing menu links associated with this entity
  $query = $storage->getQuery()
    ->condition('title', '%[View]', 'LIKE')
    ->accessCheck(FALSE);
  $ids = $query->execute();

  if (!empty($ids)) {
    $menu_links = $storage->loadMultiple($ids);

    foreach ($menu_links as $menu_link) {
      $options = $menu_link->get('link')->options ?? [];

      // Check if this menu link is associated with our entity
      if (!empty($options['menu_link_view']) &&
          !empty($options['menu_link_view']['entity_id']) &&
          $options['menu_link_view']['entity_id'] == $entity->id()) {
        $existing_menu_link = $menu_link;
        break;
      }
    }
  }

  // Prepare link options with our metadata
  $options = [
    'attributes' => [
      'class' => ['menu-link-view'],
    ],
    'menu_link_view' => [
      'entity_id' => $entity->id(),
      'view_id' => $entity->getViewId(),
      'display_id' => $entity->getDisplayId(),
    ],
  ];

  if (!$existing_menu_link) {
    // Create a new menu link content entity
    $menu_link = MenuLinkContent::create([
      'title' => $entity->label() . ' [View]',
      'link' => [
        'uri' => 'route:<nolink>',
        'options' => $options,
      ],
      'menu_name' => $entity->getMenuName(),
      'weight' => $entity->getWeight(),
      'expanded' => FALSE, // Set to FALSE since we don't want children
      'description' => $entity->getDescription(),
    ]);

    // Set parent if available
    if ($entity->getParent()) {
      $menu_link->set('parent', $entity->getParent());
    }

    $menu_link->save();

    \Drupal::logger('menu_link_view')->notice('Created menu link content for view link @id', [
      '@id' => $entity->id()
    ]);
  }
  else {
    // Update the existing menu link
    $existing_menu_link->set('title', $entity->label() . ' [View]');
    $existing_menu_link->set('description', $entity->getDescription());
    $existing_menu_link->set('weight', $entity->getWeight());
    $existing_menu_link->set('expanded', FALSE); // Ensure it's never expanded

    // Update the link with our options
    $link = $existing_menu_link->get('link')->getValue();
    $link['options'] = $options;
    $existing_menu_link->set('link', $link);

    // Update parent if available
    if ($entity->getParent()) {
      $existing_menu_link->set('parent', $entity->getParent());
    }

    $existing_menu_link->save();

    \Drupal::logger('menu_link_view')->notice('Updated menu link content for view link @id', [
      '@id' => $entity->id()
    ]);
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function menu_link_view_preprocess_menu(&$variables) {
  if (empty($variables['items'])) {
    return;
  }

  // Get our service
  if (\Drupal::hasService('menu_link_view.menu_expander')) {
    $expander = \Drupal::service('menu_link_view.menu_expander');

    if ($expander instanceof MenuLinkViewExpander) {
      // Process the menu tree
      $variables['items'] = $expander->expandTreeItems(
        $variables['items'],
        $variables['menu_name']
      );
    }
  }
}



/**
 * Implements hook_theme().
 */
function menu_link_view_theme() {
  return [
    'menu_link_view' => [
      'variables' => [
        'view_content' => NULL,
        'view_id' => NULL,
        'display_id' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function menu_link_view_page_attachments(array &$attachments) {
  // Attach our CSS library.
  $attachments['#attached']['library'][] = 'menu_link_view/menu_link_view';
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function menu_link_view_menu_local_tasks_alter(&$data, $route_name) {
  // Remove add child link from menu view menu items
  if ($route_name === 'entity.menu_link_content.canonical') {
    $menu_link = \Drupal::routeMatch()->getParameter('menu_link_content');
    if ($menu_link) {
      $options = $menu_link->get('link')->options ?? [];
      if (!empty($options['menu_link_view'])) {
        // Remove the "Add child" link
        foreach ($data['tabs'] as $key => $tabs) {
          foreach ($tabs as $tab_key => $tab) {
            if (isset($tab['#link']['url']) && $tab['#link']['url']->getRouteName() === 'entity.menu_link_content.add_form') {
              unset($data['tabs'][$key][$tab_key]);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function menu_link_view_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Only affect menu_link_content entities that are view links
  if ($entity->getEntityTypeId() === 'menu_link_content') {
    $options = $entity->get('link')->options ?? [];

    // If this is one of our view links
    if (!empty($options['menu_link_view'])) {
      // Prevent direct edit/delete operations through menu_link_content UI
      // Force users to go through our custom UI
      if ($operation === 'update' || $operation === 'delete') {
        $current_route = \Drupal::routeMatch()->getRouteName();

        // Allow access only if coming from our own forms
        $our_routes = [
          'entity.menu_link_view.edit_form',
          'entity.menu_link_view.delete_form',
        ];

        if (!in_array($current_route, $our_routes)) {
          return AccessResult::forbidden('View menu links must be edited through the View Link interface');
        }
      }
    }
  }

  // Don't change access for other entities
  return AccessResult::neutral();
}

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * This helps control the available operations for our menu items at a deeper level.
 */
function menu_link_view_menu_links_discovered_alter(&$links) {
  foreach ($links as $id => &$link) {
    if (strpos($id, 'menu_link_content:') === 0) {
      // We'll need to load the entity to check if it's a view menu item
      $uuid = substr($id, strlen('menu_link_content:'));
      $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
      $entities = $storage->loadByProperties(['uuid' => $uuid]);
      $menu_link = reset($entities);

      if ($menu_link) {
        $options = $menu_link->get('link')->options ?? [];
        if (!empty($options['menu_link_view'])) {
          // For view menu items, prevent children
          $link['metadata']['has_children'] = FALSE;
        }
      }
    }
  }
}

/**
 * Implements hook_cache_flush().
 */
function menu_link_view_cache_flush() {
  // Clear our cache tags when cache is flushed
  \Drupal::cache()->deleteAll('menu_link_view:');
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function menu_link_view_preprocess_menu_local_task(&$variables) {
  // Ensure our synthetic menu items are properly themed as local tasks
  if (!empty($variables['link']) && $variables['link'] instanceof \Drupal\Core\Url) {
    // Check if this is one of our synthetic menu items
    if (isset($variables['item']['original_link']) &&
        $variables['item']['original_link'] instanceof \Drupal\menu_link_view\SyntheticMenuLink) {
      // Add proper classes
      $variables['attributes']['class'][] = 'menu-item';
      $variables['attributes']['class'][] = 'menu-item--view-generated';
    }
  }
}

/**
 * Implements hook_preprocess_menu_local_action().
 */
function menu_link_view_preprocess_menu_local_action(&$variables) {
  // Ensure our synthetic menu items are properly themed as local actions
  if (!empty($variables['link']) && $variables['link'] instanceof \Drupal\Core\Url) {
    // Check if this is one of our synthetic menu items
    if (isset($variables['attributes']['original_link']) &&
        $variables['attributes']['original_link'] instanceof \Drupal\menu_link_view\SyntheticMenuLink) {
      // Add proper classes
      $variables['attributes']['class'][] = 'menu-item';
      $variables['attributes']['class'][] = 'menu-item--view-generated';
    }
  }
}

/**
 * Implements hook_preprocess_menu_link().
 */
function menu_link_view_preprocess_menu_link(&$variables) {
  // Check if this is one of our synthetic menu links
  if (isset($variables['element']['#original_link']) &&
      $variables['element']['#original_link'] instanceof \Drupal\menu_link_view\SyntheticMenuLink) {

    // Make sure we have classes array
    if (!isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = [];
    }

    // Add standard Drupal menu item classes
    $variables['attributes']['class'][] = 'menu-item';

    // Add menu name specific class
    if (!empty($variables['element']['#original_link']->getMenuName())) {
      $menu_name = $variables['element']['#original_link']->getMenuName();
      $variables['attributes']['class'][] = 'menu-item--' . str_replace('_', '-', $menu_name);
    }

    // Add our special class
    $variables['attributes']['class'][] = 'menu-item--view-generated';

    // Set proper role for accessibility
    $variables['attributes']['role'] = 'presentation';

    // Check if this item is in the active trail
    if (!empty($variables['element']['#in_active_trail'])) {
      $variables['attributes']['class'][] = 'menu-item--active-trail';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for menu_edit_form.
 */
function menu_link_view_form_menu_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#after_build'][] = 'menu_link_view_menu_form_after_build';
}

/**
 * After-build callback for the menu edit form.
 *
 * This runs after the operations have been added to the form.
 */
function menu_link_view_menu_form_after_build($form, FormStateInterface $form_state) {
  // No menu links to process
  if (empty($form['links']['links'])) {
    return $form;
  }

  // Create a library for our admin styles if it's needed
  $add_library = FALSE;

  // Process each menu item
  foreach (Element::children($form['links']['links']) as $id) {
    if (!isset($form['links']['links'][$id]['#item'])) {
      continue;
    }

    $item = $form['links']['links'][$id]['#item'];

    // Check if this is a view link menu item
    if (_menu_link_view_is_view_link($item)) {
      // Add our custom admin styling
      $add_library = TRUE;

      // Add a class to the menu item for styling
      if (!isset($form['links']['links'][$id]['#attributes']['class'])) {
        $form['links']['links'][$id]['#attributes']['class'] = [];
      }
      $form['links']['links'][$id]['#attributes']['class'][] = 'menu-link-view-item';

      // Check for operations
      if (isset($form['links']['links'][$id]['operations']['#links'])) {
        // Remove the 'add' operation if it exists
        if (isset($form['links']['links'][$id]['operations']['#links']['add'])) {
          unset($form['links']['links'][$id]['operations']['#links']['add']);
        }
      }
    }
  }

  // If we modified any items, attach our library
  if ($add_library) {
    $form['#attached']['library'][] = 'menu_link_view/admin';
  }

  return $form;
}

/**
 * Helper function to determine if a menu item is a view link.
 *
 * @param mixed $menu_item
 *   The menu item to check - can be either a MenuLinkInterface or MenuLinkTreeElement.
 *
 * @return bool
 *   TRUE if this is a menu view link, FALSE otherwise.
 */
function _menu_link_view_is_view_link($menu_item) {
  if (!$menu_item) {
    return FALSE;
  }

  // Handle both MenuLinkInterface and MenuLinkTreeElement
  $menu_link = NULL;

  if ($menu_item instanceof MenuLinkTreeElement) {
    $menu_link = $menu_item->link;
  }
  elseif ($menu_item instanceof MenuLinkInterface) {
    $menu_link = $menu_item;
  }
  else {
    // Not a menu link we can check
    return FALSE;
  }

  // Check for our provider
  if ($menu_link && $menu_link->getProvider() == 'menu_link_view') {
    return TRUE;
  }

  // Or check the options for menu_link_view data
  $options = $menu_link->getOptions();
  if (!empty($options['menu_link_view'])) {
    return TRUE;
  }

  return FALSE;
}
