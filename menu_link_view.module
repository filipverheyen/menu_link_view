<?php

/**
 * @file
 * Contains menu_link_view.module.
 *
 * Updated: 2025-06-26
 * Drupal 11 compatible implementation
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Render\Element;
use Drupal\menu_link_view\MenuLinkViewExpander;

/**
 * Implements hook_help().
 */
function menu_link_view_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.menu_link_view':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Menu Link View module allows you to add views as menu items that dynamically expand based on view results.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function menu_link_view_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'menu_link_content') {
    // Check if this is one of our special view menu items
    $options = $entity->get('link')->options ?? [];
    if (!empty($options['menu_link_view']) && !empty($options['menu_link_view']['entity_id'])) {
      $entity_id = $options['menu_link_view']['entity_id'];

      // Replace edit operation to point to our custom entity
      if (isset($operations['edit'])) {
        $operations['edit']['url'] = Url::fromRoute(
          'entity.menu_link_view.edit_form',
          ['menu_link_view' => $entity_id]
        );
        $operations['edit']['title'] = t('Edit view link');
      }

      // Replace delete operation to ensure both entities are deleted
      if (isset($operations['delete'])) {
        $operations['delete']['url'] = Url::fromRoute(
          'entity.menu_link_view.delete_form',
          ['menu_link_view' => $entity_id]
        );
      }

      // Remove operations that don't make sense for view links
      $operations_to_remove = ['translate', 'add', 'add-child', 'add_child'];
      foreach ($operations_to_remove as $op_to_remove) {
        if (isset($operations[$op_to_remove])) {
          unset($operations[$op_to_remove]);
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function menu_link_view_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add debug logging to see if form alter is working
  \Drupal::logger('menu_link_view')->info('Form alter called for form ID: @form_id', ['@form_id' => $form_id]);

  if ($form_id == 'menu_edit_form') {
    \Drupal::logger('menu_link_view')->info('âœ… Attaching libraries to menu edit form');

    // Add both test and admin libraries
    $form['#attached']['library'][] = 'menu_link_view/admin';

    // Add our custom validate handler to prevent children server-side
    $form['#validate'][] = 'menu_link_view_menu_edit_form_validate';

    // Process menu links after they're built
    $form['#after_build'][] = 'menu_link_view_menu_form_after_build';

    // Debug: Show what libraries are attached
    \Drupal::logger('menu_link_view')->info('Form libraries attached: @libs', [
      '@libs' => print_r($form['#attached']['library'] ?? [], TRUE)
    ]);
  }

  // Redirect editing of view menu items to our custom form
  if ($form_id === 'menu_link_content_menu_link_content_form' && isset($form['#entity'])) {
    $menu_link = $form['#entity'];
    $options = $menu_link->get('link')->options ?? [];

    if (!empty($options['menu_link_view'])) {
      // Add message explaining the redirect
      \Drupal::messenger()->addWarning(t('This menu item is a View reference and needs to be edited through the View Link interface.'));

      // Redirect to our custom form
      $entity_id = $options['menu_link_view']['entity_id'];
      $url = Url::fromRoute('entity.menu_link_view.edit_form', ['menu_link_view' => $entity_id]);
      $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url->toString());
      $response->send();
      exit;
    }
  }
}

/**
 * Process callback to fix invalid relationships during form rebuild.
 */
function menu_link_view_process_form_rebuild($form, FormStateInterface $form_state) {
  \Drupal::logger('menu_link_view')->info('=== PROCESS REBUILD START ===');

  // Check if we're in a rebuild after validation errors
  $errors = $form_state->getErrors();
  if (empty($errors)) {
    \Drupal::logger('menu_link_view')->info('Process: No validation errors, skipping rebuild fix');
    return $form;
  }

  // Check if any of the errors are our menu link view errors
  $has_menu_link_view_errors = FALSE;
  foreach ($errors as $error) {
    if (strpos($error->__toString(), 'view menu item') !== FALSE) {
      $has_menu_link_view_errors = TRUE;
      break;
    }
  }

  if (!$has_menu_link_view_errors) {
    \Drupal::logger('menu_link_view')->info('Process: No menu link view errors, skipping rebuild fix');
    return $form;
  }

  \Drupal::logger('menu_link_view')->info('Process: Found menu link view validation errors, fixing form during rebuild');

  // Get view menu items
  $view_menu_items = _menu_link_view_get_view_menu_items();

  // Fix the user input during rebuild
  $user_input = $form_state->getUserInput();
  if (!empty($user_input['links'])) {
    $fixed_input = $user_input;
    $made_fixes = FALSE;

    foreach ($fixed_input['links'] as $id => &$item) {
      if (is_string($id) && !empty($item['parent']) && isset($view_menu_items[$item['parent']])) {
        \Drupal::logger('menu_link_view')->warning('PROCESS REBUILD: Fixing user input for @id (removing parent @parent)', [
          '@id' => $id,
          '@parent' => $item['parent']
        ]);
        $item['parent'] = '';
        $made_fixes = TRUE;
      }
    }

    if ($made_fixes) {
      $form_state->setUserInput($fixed_input);
      \Drupal::logger('menu_link_view')->info('PROCESS REBUILD: Updated user input to fix invalid relationships');
    }
  }

  \Drupal::logger('menu_link_view')->info('=== PROCESS REBUILD END ===');
  return $form;
}

/**
 * After-build callback for the menu edit form.
 */
function menu_link_view_menu_form_after_build($form, FormStateInterface $form_state) {
  if (empty($form['links']['links'])) {
    return $form;
  }

  // Process each menu item to identify view links
  foreach (Element::children($form['links']['links']) as $id) {
    if (!isset($form['links']['links'][$id]['#item'])) {
      continue;
    }

    $item = $form['links']['links'][$id]['#item'];

    // Check if this is a view link menu item
    if (_menu_link_view_is_view_link($item)) {
      // Add a class to the menu item for styling
      if (!isset($form['links']['links'][$id]['#attributes']['class'])) {
        $form['links']['links'][$id]['#attributes']['class'] = [];
      }
      $form['links']['links'][$id]['#attributes']['class'][] = 'menu-link-view-item';

      // Remove unwanted operations from the operations links
      if (isset($form['links']['links'][$id]['operations']['#links'])) {
        $operations_to_remove = ['add', 'add-child', 'add_child', 'translate'];
        foreach ($operations_to_remove as $op) {
          if (isset($form['links']['links'][$id]['operations']['#links'][$op])) {
            unset($form['links']['links'][$id]['operations']['#links'][$op]);
          }
        }
      }
    }
  }

  return $form;
}

/**
 * Validation handler for menu edit form to prevent children for view menu items.
 */
function menu_link_view_menu_edit_form_validate($form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  if (empty($values['links'])) {
    return;
  }

  // Get all our view menu items
  $view_menu_items = _menu_link_view_get_view_menu_items();

  // Check for invalid relationships and show errors
  foreach ($values['links'] as $id => $item) {
    if (is_string($id) && !empty($item['parent']) && isset($view_menu_items[$item['parent']])) {
      $item_title = _menu_link_view_get_menu_item_title($id);

      // Set error on the specific parent field
      $form_state->setErrorByName(
        "links][{$id}][parent",
        t('The menu item %title cannot be placed under the view menu item %parent because view menu items expand into multiple items and cannot have children.', [
          '%title' => $item_title,
          '%parent' => $view_menu_items[$item['parent']],
        ])
      );
    }
  }
}

/**
 * Helper function to immediately fix invalid parent relationships in the database.
 */
function _menu_link_view_fix_invalid_parent_in_database($menu_link_id, $invalid_parent_id) {
  \Drupal::logger('menu_link_view')->info('Attempting to fix database for @id with invalid parent @parent', [
    '@id' => $menu_link_id,
    '@parent' => $invalid_parent_id
  ]);

  $uuid = NULL;

  // Handle different menu link ID formats
  if (strpos($menu_link_id, 'menu_plugin_id:menu_link_content:') === 0) {
    // Format: menu_plugin_id:menu_link_content:UUID
    $uuid = substr($menu_link_id, strlen('menu_plugin_id:menu_link_content:'));
    \Drupal::logger('menu_link_view')->info('Extracted UUID from menu_plugin_id format: @uuid', ['@uuid' => $uuid]);
  }
  elseif (strpos($menu_link_id, 'menu_link_content:') === 0) {
    // Format: menu_link_content:UUID
    $uuid = substr($menu_link_id, strlen('menu_link_content:'));
    \Drupal::logger('menu_link_view')->info('Extracted UUID from menu_link_content format: @uuid', ['@uuid' => $uuid]);
  }
  else {
    \Drupal::logger('menu_link_view')->warning('Unknown menu link ID format: @id', ['@id' => $menu_link_id]);
    return;
  }

  if (!$uuid) {
    \Drupal::logger('menu_link_view')->error('Could not extract UUID from menu link ID: @id', ['@id' => $menu_link_id]);
    return;
  }

  // Load and update the menu link content entity
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  $entities = $storage->loadByProperties(['uuid' => $uuid]);
  $menu_link = reset($entities);

  if ($menu_link) {
    \Drupal::logger('menu_link_view')->info('Found menu link entity, current parent: @current_parent', [
      '@current_parent' => $menu_link->getParentId()
    ]);

    // Reset the parent to empty (root level)
    $menu_link->set('parent', '');
    $menu_link->save();

    \Drupal::logger('menu_link_view')->info('SUCCESSFULLY fixed invalid parent relationship in database for menu link @uuid', ['@uuid' => $uuid]);

    // Clear menu cache to ensure the change is reflected immediately
    \Drupal::service('cache_tags.invalidator')->invalidateTags(['config:system.menu.main']);
    \Drupal::service('plugin.manager.menu.link')->rebuild();

  } else {
    \Drupal::logger('menu_link_view')->error('Could not load menu link entity with UUID @uuid', ['@uuid' => $uuid]);
  }
}

/**
 * Submit handler to clean up invalid parent relationships.
 */
function menu_link_view_menu_edit_form_submit($form, FormStateInterface $form_state) {
  // Only run if there were validation errors
  if ($form_state->getErrors()) {
    return;
  }

  $values = $form_state->getValues();

  if (empty($values['links'])) {
    return;
  }

  // Get all our view menu items
  $view_menu_items = _menu_link_view_get_view_menu_items();
  $cleaned_values = $values;

  // Clean up any invalid parent relationships that might have slipped through
  foreach ($cleaned_values['links'] as $id => &$item) {
    if (is_string($id) && !empty($item['parent']) && isset($view_menu_items[$item['parent']])) {
      // Reset invalid parents
      $item['parent'] = '';

      // Log this cleanup
      \Drupal::logger('menu_link_view')->info('Cleaned up invalid parent relationship for menu item @id', ['@id' => $id]);
    }
  }

  // Update form state with cleaned values
  $form_state->setValues($cleaned_values);
}

/**
 * Helper function to get all view menu items.
 */
function _menu_link_view_get_view_menu_items() {
  $view_menu_items = [];
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');

  $query = $storage->getQuery();
  $query->condition('title', '%[View]', 'LIKE');
  $query->accessCheck(FALSE);
  $ids = $query->execute();

  if (!empty($ids)) {
    $menu_links = $storage->loadMultiple($ids);

    foreach ($menu_links as $menu_link) {
      $options = $menu_link->get('link')->options ?? [];
      if (isset($options['menu_link_view'])) {
        $plugin_id = 'menu_link_content:' . $menu_link->uuid();
        $view_menu_items[$plugin_id] = $menu_link->label();
      }
    }
  }

  return $view_menu_items;
}

/**
 * Helper function to get menu item title.
 */
function _menu_link_view_get_menu_item_title($id) {
  if (strpos($id, 'menu_link_content:') === 0) {
    $uuid = substr($id, strlen('menu_link_content:'));
    $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
    $entities = $storage->loadByProperties(['uuid' => $uuid]);
    $menu_item = reset($entities);
    if ($menu_item) {
      return $menu_item->label();
    }
  }
  return t('Menu item');
}

/**
 * Helper function to determine if a menu item is a view link.
 */
function _menu_link_view_is_view_link($menu_item) {
  if (!$menu_item) {
    return FALSE;
  }

  $menu_link = NULL;
  if ($menu_item instanceof \Drupal\Core\Menu\MenuLinkTreeElement) {
    $menu_link = $menu_item->link;
  } elseif ($menu_item instanceof \Drupal\Core\Menu\MenuLinkInterface) {
    $menu_link = $menu_item;
  } else {
    return FALSE;
  }

  // Check for our provider
  if ($menu_link && $menu_link->getProvider() == 'menu_link_view') {
    return TRUE;
  }

  // Or check the options for menu_link_view data
  $options = $menu_link->getOptions();
  return !empty($options['menu_link_view']);
}

/**
 * Implements hook_entity_insert().
 */
function menu_link_view_entity_insert($entity) {
  if ($entity->getEntityTypeId() == 'menu_link_view') {
    // Create a menu_link_content entity for this view link
    _menu_link_view_ensure_menu_link_content($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function menu_link_view_entity_update($entity) {
  if ($entity->getEntityTypeId() == 'menu_link_view') {
    // Update or create the menu_link_content entity
    _menu_link_view_ensure_menu_link_content($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function menu_link_view_entity_delete($entity) {
  if ($entity->getEntityTypeId() == 'menu_link_view') {
    // Find and delete any associated menu_link_content entities
    $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');

    $query = $storage->getQuery()
      ->condition('title', '%[View]', 'LIKE')
      ->accessCheck(FALSE);
    $ids = $query->execute();

    if (!empty($ids)) {
      $menu_links = $storage->loadMultiple($ids);

      foreach ($menu_links as $menu_link) {
        $options = $menu_link->get('link')->options ?? [];

        if (!empty($options['menu_link_view']) &&
            !empty($options['menu_link_view']['entity_id']) &&
            $options['menu_link_view']['entity_id'] == $entity->id()) {
          $menu_link->delete();
        }
      }
    }

    // Invalidate cache tags
    Cache::invalidateTags([
      'menu:' . $entity->getMenuName(),
      'config:system.menu.' . $entity->getMenuName()
    ]);
  }
}

/**
 * Helper function to ensure a menu_link_content entity exists for the view link.
 */
function _menu_link_view_ensure_menu_link_content($entity) {
  $storage = \Drupal::entityTypeManager()->getStorage('menu_link_content');
  $existing_menu_link = NULL;

  // Try to find existing menu links associated with this entity
  $query = $storage->getQuery()
    ->condition('title', '%[View]', 'LIKE')
    ->accessCheck(FALSE);
  $ids = $query->execute();

  if (!empty($ids)) {
    $menu_links = $storage->loadMultiple($ids);

    foreach ($menu_links as $menu_link) {
      $options = $menu_link->get('link')->options ?? [];

      if (!empty($options['menu_link_view']) &&
          !empty($options['menu_link_view']['entity_id']) &&
          $options['menu_link_view']['entity_id'] == $entity->id()) {
        $existing_menu_link = $menu_link;
        break;
      }
    }
  }

  // Prepare link options with our metadata
  $options = [
    'attributes' => [
      'class' => ['menu-link-view'],
    ],
    'menu_link_view' => [
      'entity_id' => $entity->id(),
      'view_id' => $entity->getViewId(),
      'display_id' => $entity->getDisplayId(),
    ],
  ];

  if (!$existing_menu_link) {
    // Create a new menu link content entity
    $menu_link = MenuLinkContent::create([
      'title' => $entity->label() . ' [View]',
      'link' => [
        'uri' => 'route:<nolink>',
        'options' => $options,
      ],
      'menu_name' => $entity->getMenuName(),
      'weight' => $entity->getWeight(),
      'expanded' => FALSE,
      'description' => $entity->getDescription(),
    ]);

    if ($entity->getParent()) {
      $menu_link->set('parent', $entity->getParent());
    }

    $menu_link->save();
  } else {
    // Update the existing menu link
    $existing_menu_link->set('title', $entity->label() . ' [View]');
    $existing_menu_link->set('description', $entity->getDescription());
    $existing_menu_link->set('weight', $entity->getWeight());
    $existing_menu_link->set('expanded', FALSE);

    $link = $existing_menu_link->get('link')->getValue();
    $link[0]['options'] = $options;
    $existing_menu_link->set('link', $link);

    if ($entity->getParent()) {
      $existing_menu_link->set('parent', $entity->getParent());
    }

    $existing_menu_link->save();
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function menu_link_view_preprocess_menu(&$variables) {
  if (empty($variables['items'])) {
    return;
  }

  // Get our service
  if (\Drupal::hasService('menu_link_view.menu_expander')) {
    $expander = \Drupal::service('menu_link_view.menu_expander');

    if ($expander instanceof MenuLinkViewExpander) {
      // Process the menu tree
      $variables['items'] = $expander->expandTreeItems(
        $variables['items'],
        $variables['menu_name']
      );
    }
  }
}

/**
 * Implements hook_theme().
 */
function menu_link_view_theme() {
  return [
    'menu_link_view' => [
      'variables' => [
        'view_content' => NULL,
        'view_id' => NULL,
        'display_id' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function menu_link_view_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'menu_link_view/menu_link_view';
}
